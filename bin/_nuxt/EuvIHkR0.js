var i={};let r="/api";async function h({username:e,password:t}){const a=await fetch(`${r}/auth/login`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:e,password:t})}),s=await a.json().catch(()=>({}));if(!a.ok)throw new Error(s.message||"Login failed");return s}function p(){localStorage.removeItem("snapstack_auth")}function o(){return typeof window>"u"?null:JSON.parse(localStorage.getItem("snapstack_auth")||"null")}function f(){const e=o();return e&&e.token&&e.user}async function d(){const e=o(),t=await fetch(`${r}/backups`,{headers:{Authorization:`Bearer ${e.token}`,"Content-Type":"application/json"}});if(!t.ok)throw new Error("Failed to fetch backups");return t.json()}async function l(e){const t=o(),a=await fetch(`${r}/backups/${e}`,{headers:{Authorization:`Bearer ${t.token}`,"Content-Type":"application/json"}});if(!a.ok)throw new Error("Failed to fetch backup");return a.json()}async function w(e){const t=o(),a={...e,server_ids:Array.isArray(e.server_ids)?e.server_ids:[]},s=await fetch(`${r}/backups`,{method:"POST",headers:{Authorization:`Bearer ${t.token}`,"Content-Type":"application/json"},body:JSON.stringify(a)});if(!s.ok){const n=await s.json().catch(()=>({}));throw new Error(n.message||"Failed to create backup")}return s.json()}async function y(e,t){const a=o(),s={...t,server_ids:Array.isArray(t.server_ids)?t.server_ids:[]},n=await fetch(`${r}/backups/${e}`,{method:"PUT",headers:{Authorization:`Bearer ${a.token}`,"Content-Type":"application/json"},body:JSON.stringify(s)});if(!n.ok){const c=await n.json().catch(()=>({}));throw new Error(c.message||"Failed to update backup")}return n.json()}async function k(e){const t=o(),a=await fetch(`${r}/backups/${e}`,{method:"DELETE",headers:{Authorization:`Bearer ${t.token}`,"Content-Type":"application/json"}});if(!a.ok){const s=await a.json().catch(()=>({}));throw new Error(s.message||"Failed to delete backup")}return a.status===204?{success:!0}:a.json().catch(()=>({success:!0}))}async function $(e){const t=o(),a=await fetch(`${r}/backups/${e}/execute`,{method:"POST",headers:{Authorization:`Bearer ${t.token}`,"Content-Type":"application/json"}});if(!a.ok){const s=await a.json().catch(()=>({}));throw new Error(s.message||"Failed to execute backup")}return a.json()}async function u(){const e=o(),t=await fetch(`${r}/servers`,{headers:{Authorization:`Bearer ${e.token}`,"Content-Type":"application/json"}});if(!t.ok)throw new Error("Failed to fetch servers");return t.json()}async function j(e){const t=o();try{const a=await fetch(`${r}/servers`,{method:"POST",headers:{Authorization:`Bearer ${t.token}`,"Content-Type":"application/json"},body:JSON.stringify(e)}),s=await a.json().catch(()=>({}));return a.ok?{success:!0,data:s}:{success:!1,message:s.message||s.error||"Failed to create server"}}catch(a){return{success:!1,message:a.message||"Network error"}}}async function m(e,t){const a=o(),s=await fetch(`${r}/servers/${e}`,{method:"PUT",headers:{Authorization:`Bearer ${a.token}`,"Content-Type":"application/json"},body:JSON.stringify(t)});if(!s.ok){const n=await s.json().catch(()=>({}));throw new Error(n.message||"Failed to update server")}return s.json()}async function B(e){const t=o(),a=await fetch(`${r}/servers/${e}`,{method:"DELETE",headers:{Authorization:`Bearer ${t.token}`,"Content-Type":"application/json"}});if(!a.ok){const s=await a.json().catch(()=>({}));throw new Error(s.message||"Failed to delete server")}return a.status===204?{success:!0}:a.json().catch(()=>({success:!0}))}async function v(e){const t=o(),a=await fetch(`${r}/servers/${e}/test`,{method:"POST",headers:{Authorization:`Bearer ${t.token}`,"Content-Type":"application/json"}});if(!a.ok){const s=await a.json().catch(()=>({}));throw new Error(s.message||"Failed to test server connection")}return a.json()}async function g(){const e=o(),t=await fetch(`${r}/dashboard/stats`,{headers:{Authorization:`Bearer ${e.token}`,"Content-Type":"application/json"}});if(!t.ok)throw new Error("Failed to fetch dashboard stats");return t.json()}async function T(e=10,t=0){try{const a=o(),s=await fetch(`${r}/dashboard/recent-activity?limit=${e}&offset=${t}`,{headers:{Authorization:`Bearer ${a?.token??""}`,"Content-Type":"application/json"}});return s.ok?s.json():[]}catch(a){return console.error("Failed to fetch recent activity:",a),[]}}async function E(){try{const e=o(),t=await fetch(`${r}/`,{headers:{Authorization:`Bearer ${e?.token??""}`,"Content-Type":"application/json"}});return t.ok?(await t.json())?.message?{status:"online"}:{status:"offline"}:{status:"offline"}}catch{return{status:"offline"}}}async function A(){const e=o(),t=await fetch(`${r}/servers/status`,{headers:{Authorization:`Bearer ${e.token}`,"Content-Type":"application/json"}});if(!t.ok)throw new Error("Failed to fetch server statuses");return t.json()}async function S(e,t=null){return o(),(await u()).some(s=>s.name===e&&s.id!==t)}async function C(e,t){const a=o(),s=e==null?`${r}/local/validate-path`:`${r}/servers/${e}/validate-path`,n=await fetch(s,{method:"POST",headers:{Authorization:`Bearer ${a.token}`,"Content-Type":"application/json"},body:JSON.stringify({path:t})});if(!n.ok){const c=await n.json().catch(()=>({}));throw new Error(c.message||"Failed to validate path")}return n.json()}async function D(){const e=o(),t=await fetch(`${r}/backups/processes/running`,{headers:{Authorization:`Bearer ${e.token}`,"Content-Type":"application/json"}});if(!t.ok)throw new Error("Failed to fetch running backups");return t.json()}async function b(){const e=o(),t=await fetch(`${r}/backups/processes`,{method:"DELETE",headers:{Authorization:`Bearer ${e.token}`,"Content-Type":"application/json"}});if(!t.ok){const a=await t.json().catch(()=>({}));throw new Error(a.message||"Failed to delete all processes")}return t.status===204?{success:!0}:t.json().catch(()=>({success:!0}))}async function z(e){const t=o(),a=await fetch(`${r}/backups/processes/${e}`,{method:"DELETE",headers:{Authorization:`Bearer ${t.token}`,"Content-Type":"application/json"}});if(!a.ok){const s=await a.json().catch(()=>({}));throw new Error(s.message||"Failed to delete process")}return a.status===204?{success:!0}:a.json().catch(()=>({success:!0}))}function F(e){return`${(i.NUXT_PUBLIC_BACKEND_URL||"http://localhost:8080").replace(/^http/,"ws")}/api/monitor/${e}/ws`}function _(){return`${(i.NUXT_PUBLIC_BACKEND_URL||"http://localhost:8080").replace(/^http/,"ws")}/api/monitor/ws`}export{j as a,A as b,S as c,B as d,T as e,u as f,g,E as h,f as i,D as j,b as k,z as l,h as m,l as n,$ as o,d as p,k as q,F as r,w as s,v as t,m as u,_ as v,y as w,C as x,o as y,p as z};
